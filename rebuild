#!/usr/bin/env python

# builds the squarespace.github.io static site

import argparse
import codecs
import getpass
import json
import os
import sys
import traceback


ROOT = os.path.abspath(os.path.dirname(__file__))
PREFIX = '[rebuild] '

WARNING = '''

NOTE: This file is auto-generated. Please edit templates/index.html and rebuild.

'''

EPILOG = '''

 download - refresh the repository information from github
 build    - regenerate the site from the template

'''

REPO_CACHE = '_repocache.json'

COMMANDS = ('download', 'build')

E_ERROR = 'An error occurred: %s\n'
E_IMPORT = 'Failed to locate a module: %s\n'
E_LOGIN = 'Failed to login to Github: %s\n'
E_NOREPO = 'Unknown repository: %s\n'
E_NODATA = 'You must run the "download" command first'
E_RATELIM = 'NOTE: rate limiting of %s calls per minute is in effect..\n\n'
E_RUNPIP = 'You may need to run "pip install -r requirements.txt"\n'


def flush(stm, msg, fail=0):
    stm.write(msg)
    stm.flush()
    if fail:
        sys.exit(1)


emit = lambda m: flush(sys.stdout, m)
info = lambda m: flush(sys.stdout, PREFIX + m)
fail = lambda m: flush(sys.stderr, PREFIX + m, 1)
read = lambda p: codecs.open(p, 'r', 'utf-8').read()
validline = lambda v: v and not v[0] == '#'
readlines = lambda p: [v for v in read(p).split('\n') if validline(v)]
write = lambda p, d: codecs.open(p, 'w', 'utf-8').write(d)
rootpath = lambda *n: os.path.join(ROOT, *n)
read_template = lambda n: read(os.path.join(ROOT, 'templates', n))


try:
    from github import Github, GithubException, UnknownObjectException
    from jinja2 import Environment
    import requests
    import yaml
except ImportError, e:
    fail((E_IMPORT % e) + E_RUNPIP)


def login():
    info('Authenticating to Github. (blank == anonymous)\n')
    username = raw_input('username: ')
    if username:
        password = getpass.getpass('password: ')
    try:
        if not username:
            client = Github()
        else:
            client = Github(username, password)
        _, limit = client.rate_limiting
        if limit:
            info(E_RATELIM % limit)
        return client

    except Exception, e:
        fail(E_LOGIN % e)


def fetch_repos(client, names):
    for name in names:
        try:
            path = 'squarespace/' + name
            info('Fetching information for %r repository..\n' % path)
            repo = client.get_repo(path)
        except UnknownObjectException, e:
            info('Error: failed to locate "%s"\n' % path)
            continue
        except GithubException, e:
            # more serious error occurred, abort..
            err = '\n' + traceback.format_exc(e)
            fail(E_ERROR % err)

        yield dict(
            name=repo.name.replace('-', ' ').title(),
            homepage=repo.homepage,
            url=repo.html_url,
            description=repo.description,
            stars=repo.stargazers_count,
            forks=repo.forks_count,
            language=repo.language)


def parse_args():
    formatter = argparse.ArgumentDefaultsHelpFormatter
    parser = argparse.ArgumentParser('rebuild', epilog=EPILOG,
        formatter_class=formatter)
    parser.add_argument('cmd', choices=COMMANDS, default='build',
        nargs='?', help='command to execute')

    return parser.parse_args()

    subs = parser.add_subparsers(dest='cmd')

    sub = subs.add_parser('download',
        help='Download repository information from Github',
        formatter_class=formatter)

    sub = subs.add_parser('build',
        help='Build the index from the template',
        formatter_class=formatter)

    return parser.parse_args()


def do_download():
    client = login()
    config = yaml.load(open(rootpath('repos.yml'), 'rb'))
    repos = list(fetch_repos(client, config['repos']))
    json.dump(repos, open(REPO_CACHE, 'wb'), indent=2, sort_keys=1)


def do_build():
    if not os.path.exists(REPO_CACHE):
        fail(E_NODATA)
    repos = json.load(open(REPO_CACHE, 'rb'))
    
    # rebuild index
    info('Rebuilding index.html..\n')
    source = read(rootpath('templates', 'index.html'))
    template = Environment().from_string(source)
    result = template.render(repos=repos, warning=WARNING)
    write(rootpath('index.html'), result)


def main():
    args = parse_args()
    if args.cmd == 'download':
        do_download()
    elif args.cmd == 'build':
        do_build()


if __name__ == '__main__':
    main()


